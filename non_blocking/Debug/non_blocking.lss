
non_blocking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000186  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008fa  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000081a  00000000  00000000  00000b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c9  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001684  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000419  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f9  00000000  00000000  00001b11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001c0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4e c0       	rjmp	.+156    	; 0xda <__vector_15>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	3d d0       	rcall	.+122    	; 0x124 <main>
  aa:	6b c0       	rjmp	.+214    	; 0x182 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <millis>:
volatile unsigned long millis_counter = 0;

// 밀리초 반환 함수
unsigned long millis() {
	unsigned long millis_copy;
	cli(); // 인터럽트 비활성화
  ae:	f8 94       	cli
	millis_copy = millis_counter;
  b0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  b4:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  bc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	sei(); // 인터럽트 활성화
  c0:	78 94       	sei
	return millis_copy;
}
  c2:	08 95       	ret

000000c4 <timer0_init>:

// Timer0 초기화 함수
void timer0_init() {
	// CTC 모드 설정 (Clear Timer on Compare Match)
	TCCR0 = (1 << WGM01); // WGM01 = 1 (CTC 모드)
  c4:	88 e0       	ldi	r24, 0x08	; 8
  c6:	83 bf       	out	0x33, r24	; 51
	
	// 분주비 설정 (64 분주)
	TCCR0 |= (1 << CS01) | (1 << CS00); // CS01 = 1, CS00 = 1
  c8:	83 b7       	in	r24, 0x33	; 51
  ca:	83 60       	ori	r24, 0x03	; 3
  cc:	83 bf       	out	0x33, r24	; 51

	// 비교값 설정 (1ms 기준)
	OCR0 = 250 - 1; // (16MHz / 64) / 1000 - 1 = 250 - 1
  ce:	89 ef       	ldi	r24, 0xF9	; 249
  d0:	81 bf       	out	0x31, r24	; 49

	// 비교 일치 인터럽트 허용
	TIMSK |= (1 << OCIE0); // OCIE0 = 1
  d2:	87 b7       	in	r24, 0x37	; 55
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	87 bf       	out	0x37, r24	; 55
  d8:	08 95       	ret

000000da <__vector_15>:
}

// Timer0 비교 일치 인터럽트 서비스 루틴
ISR(TIMER0_COMP_vect) {
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
  e8:	af 93       	push	r26
  ea:	bf 93       	push	r27
	millis_counter++;
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  f8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	a1 1d       	adc	r26, r1
 100:	b1 1d       	adc	r27, r1
 102:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 106:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 10e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
}
 112:	bf 91       	pop	r27
 114:	af 91       	pop	r26
 116:	9f 91       	pop	r25
 118:	8f 91       	pop	r24
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <main>:

	unsigned long previousMillisB = 0; // B포트 이전 시간
	unsigned long previousMillisA = 0; // A포트 이전 시간

	// B 포트와 A 포트를 출력으로 설정
	DDRB = 0xFF; // B포트를 출력으로 설정
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xFF; // A포트를 출력으로 설정
 128:	8a bb       	out	0x1a, r24	; 26

	// 초기 LED 상태
	PORTB = 0x00;
 12a:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x00;
 12c:	1b ba       	out	0x1b, r1	; 27

	// Timer0 초기화 및 인터럽트 활성화
	timer0_init();
 12e:	ca df       	rcall	.-108    	; 0xc4 <timer0_init>
	sei(); // 전역 인터럽트 활성화
 130:	78 94       	sei
	// LED 토글 간격 설정
	const unsigned long intervalB = 500; // B포트 LED (0.5초)
	const unsigned long intervalA = 1000; // A포트 LED (1초)

	unsigned long previousMillisB = 0; // B포트 이전 시간
	unsigned long previousMillisA = 0; // A포트 이전 시간
 132:	81 2c       	mov	r8, r1
 134:	91 2c       	mov	r9, r1
 136:	54 01       	movw	r10, r8
int main(void) {
	// LED 토글 간격 설정
	const unsigned long intervalB = 500; // B포트 LED (0.5초)
	const unsigned long intervalA = 1000; // A포트 LED (1초)

	unsigned long previousMillisB = 0; // B포트 이전 시간
 138:	c1 2c       	mov	r12, r1
 13a:	d1 2c       	mov	r13, r1
	// Timer0 초기화 및 인터럽트 활성화
	timer0_init();
	sei(); // 전역 인터럽트 활성화

	while (1) {
		unsigned long currentMillis = millis();
 13c:	76 01       	movw	r14, r12
 13e:	b7 df       	rcall	.-146    	; 0xae <millis>

		// B 포트 LED 깜박임
		if (currentMillis - previousMillisB >= intervalB) {
 140:	8b 01       	movw	r16, r22
 142:	9c 01       	movw	r18, r24
 144:	0c 19       	sub	r16, r12
 146:	1d 09       	sbc	r17, r13
 148:	2e 09       	sbc	r18, r14
 14a:	3f 09       	sbc	r19, r15
 14c:	04 3f       	cpi	r16, 0xF4	; 244
 14e:	11 40       	sbci	r17, 0x01	; 1
 150:	21 05       	cpc	r18, r1
 152:	31 05       	cpc	r19, r1
 154:	28 f0       	brcs	.+10     	; 0x160 <main+0x3c>
			PORTB ^= 0xFF; // B포트의 모든 핀 상태 토글
 156:	28 b3       	in	r18, 0x18	; 24
 158:	20 95       	com	r18
 15a:	28 bb       	out	0x18, r18	; 24
			previousMillisB = currentMillis;
 15c:	6b 01       	movw	r12, r22
 15e:	7c 01       	movw	r14, r24
		}

		// A 포트 LED 깜박임
		if (currentMillis - previousMillisA >= intervalA) {
 160:	8b 01       	movw	r16, r22
 162:	9c 01       	movw	r18, r24
 164:	08 19       	sub	r16, r8
 166:	19 09       	sbc	r17, r9
 168:	2a 09       	sbc	r18, r10
 16a:	3b 09       	sbc	r19, r11
 16c:	08 3e       	cpi	r16, 0xE8	; 232
 16e:	13 40       	sbci	r17, 0x03	; 3
 170:	21 05       	cpc	r18, r1
 172:	31 05       	cpc	r19, r1
 174:	20 f3       	brcs	.-56     	; 0x13e <main+0x1a>
			PORTA ^= 0xFF; // A포트의 모든 핀 상태 토글
 176:	2b b3       	in	r18, 0x1b	; 27
 178:	20 95       	com	r18
 17a:	2b bb       	out	0x1b, r18	; 27
			previousMillisA = currentMillis;
 17c:	4b 01       	movw	r8, r22
 17e:	5c 01       	movw	r10, r24
 180:	de cf       	rjmp	.-68     	; 0x13e <main+0x1a>

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
