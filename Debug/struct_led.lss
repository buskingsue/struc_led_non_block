
struct_led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000156  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009d9  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000085c  00000000  00000000  00000c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fe  00000000  00000000  00001489  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001788  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040b  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000150  00000000  00000000  00001bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001d47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	2f d0       	rcall	.+94     	; 0xf8 <main>
  9a:	5b c0       	rjmp	.+182    	; 0x152 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <ledInit>:
} LED_S; //LED_S 라는 typedef 를 사용한 자료형 재정의

// LED 초기화 함수: 지정된 핀을 출력으로 설정
void ledInit(LED_S* led) {
	//DDRB=0xff;
	*(led->port - 1) |= 0xff; //(1 << led->pinNumber); 핀 0번을 출력으로 쓴다
  9e:	dc 01       	movw	r26, r24
  a0:	ed 91       	ld	r30, X+
  a2:	fc 91       	ld	r31, X
  a4:	82 91       	ld	r24, -Z
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	80 83       	st	Z, r24
  aa:	08 95       	ret

000000ac <ledON>:
//PORTB - 1 ==DDRB B포트를 출력으로 쓴다
}

// LED ON 함수: 지정된 핀을 HIGH로 설정
void ledON(LED_S* led) {
  ac:	dc 01       	movw	r26, r24
	*(led->port) |= (1 << led->pinNumber);  // 해당 핀을 HIGH로 설정
  ae:	ed 91       	ld	r30, X+
  b0:	fc 91       	ld	r31, X
  b2:	11 97       	sbiw	r26, 0x01	; 1
  b4:	40 81       	ld	r20, Z
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	c9 01       	movw	r24, r18
  bc:	12 96       	adiw	r26, 0x02	; 2
  be:	0c 90       	ld	r0, X
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <ledON+0x1a>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	0a 94       	dec	r0
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <ledON+0x16>
  ca:	84 2b       	or	r24, r20
  cc:	80 83       	st	Z, r24
  ce:	08 95       	ret

000000d0 <ledOFF>:
}

// LED OFF 함수: 지정된 핀을 LOW로 설정
void ledOFF(LED_S* led) {
	*(led->port) &= ~(1 << led->pinNumber);  // 해당 핀을 LOW로 설정
  d0:	dc 01       	movw	r26, r24
  d2:	ed 91       	ld	r30, X+
  d4:	fc 91       	ld	r31, X
  d6:	11 97       	sbiw	r26, 0x01	; 1
  d8:	40 81       	ld	r20, Z
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	b9 01       	movw	r22, r18
  e0:	12 96       	adiw	r26, 0x02	; 2
  e2:	0c 90       	ld	r0, X
  e4:	02 c0       	rjmp	.+4      	; 0xea <ledOFF+0x1a>
  e6:	66 0f       	add	r22, r22
  e8:	77 1f       	adc	r23, r23
  ea:	0a 94       	dec	r0
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <ledOFF+0x16>
  ee:	cb 01       	movw	r24, r22
  f0:	80 95       	com	r24
  f2:	84 23       	and	r24, r20
  f4:	80 83       	st	Z, r24
  f6:	08 95       	ret

000000f8 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "LED.h"

int main()
{
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	00 d0       	rcall	.+0      	; 0xfe <main+0x6>
  fe:	1f 92       	push	r1
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
	//DDRB = 0xff;

	// 구조체 변수 선언 및 초기화
	LED_S m_led;
	m_led.port = &PORTB;   // 포트 B 사용
 104:	88 e3       	ldi	r24, 0x38	; 56
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	9a 83       	std	Y+2, r25	; 0x02
 10a:	89 83       	std	Y+1, r24	; 0x01
	m_led.pinNumber = 0;   // 초기 핀 번호는 0번
 10c:	1b 82       	std	Y+3, r1	; 0x03

	// LED 초기화
	ledInit(&m_led);
 10e:	ce 01       	movw	r24, r28
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	c5 df       	rcall	.-118    	; 0x9e <ledInit>
	while (1)
	{
		ledON(&m_led);     // 현재 핀의 LED 켜기
 114:	ce 01       	movw	r24, r28
 116:	01 96       	adiw	r24, 0x01	; 1
 118:	c9 df       	rcall	.-110    	; 0xac <ledON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	85 ea       	ldi	r24, 0xA5	; 165
 11e:	9e e0       	ldi	r25, 0x0E	; 14
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x28>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x32>
 12a:	00 00       	nop
		_delay_ms(300);    // 300ms 대기
		ledOFF(&m_led);    // 현재 핀의 LED 끄기
 12c:	ce 01       	movw	r24, r28
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	cf df       	rcall	.-98     	; 0xd0 <ledOFF>
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	85 ea       	ldi	r24, 0xA5	; 165
 136:	9e e0       	ldi	r25, 0x0E	; 14
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x40>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x4a>
 142:	00 00       	nop
		_delay_ms(300);    // 300ms 대기

		// 다음 핀으로 이동
		m_led.pinNumber++;
 144:	8b 81       	ldd	r24, Y+3	; 0x03
 146:	8f 5f       	subi	r24, 0xFF	; 255
 148:	8b 83       	std	Y+3, r24	; 0x03
		if (m_led.pinNumber == 8) // 핀 번호가 8 이상이 되면 0으로 초기화
 14a:	88 30       	cpi	r24, 0x08	; 8
 14c:	19 f7       	brne	.-58     	; 0x114 <main+0x1c>
		m_led.pinNumber = 0;
 14e:	1b 82       	std	Y+3, r1	; 0x03
 150:	e1 cf       	rjmp	.-62     	; 0x114 <main+0x1c>

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
